---
name: service
author: "@mas2020"
shortDesc: Info about the services
description: |
  This module is useful to get information on processes, disk status, memory occupation...
version: 0.5.0
commands:
  - name: info
    usage: info
    shortDesc: Info about single service
    description: |
      Start, stop and get information about services
    category: system
    options:
      - name: name
        shortname: n
        required: true
        desc: status info of a service (e.g. goal system service -n sshd --on yourserver)
    systems: 
      - type: "*"
        cmd: "systemctl status $name.service --no-pager"
        filters:
          - pattern: .*running.*
            message: service is RUNNING
            color: GREEN
          - pattern: 'could not be found'
            message: service not FOUND
            color: RED
  - name: list
    usage: list
    shortDesc: List OS services
    description: |
      List the services with status == active. To get all services pass --all, to filter for a specific
      status pass --status <STATUS>. To apply a custom filter on the list use --search <REG-EXP>.
      This command works on the init or systemd architecture.
    category: system
    options:
      - name: search
        shortname: s
        {{/* search options variable */}}
        {{ $search := index .CmdFlags "--search" }}
        {{ $s := index .CmdFlags "-s" }}
        desc: |
          to filter a list using a regexp with linux grep command, some examples are:
          service list --on <host> -s '-i httpd'
          service list --on <host> -s '-v httpd'
          service list --on <host> -s 'httpd.*$'
      - name: all
        {{ $all := index .CmdFlags "--all" }}
        {{ $a := index .CmdFlags "-a" }}
        shortname: a
        desc: "to get all the units, active and not"
        substitution: --all
      - name: status
        {{ $status := index .CmdFlags "--status" }}
        desc: "to get the units in a particular status e.g. loaded, active, inactive. Use --status <STATUS>"
    systems:
      - type: "redhat-old"
        {{ if or $search  $s }}
        cmd: "service --status-all | grep $search"
          {{ if $status }}
        cmd: "service --status-all | grep $status | grep $search"
          {{end}}   
        {{else}} # not search
          {{ if $status }}
        cmd: "service --status-all | grep $status"
          {{else}}
        cmd: "service --status-all"
          {{end}}
        {{end}}
      - type: "*"
        {{ if or $search  $s }}
          {{ if $status }}
        cmd: "systemctl list-units $all --state=$status --no-pager | grep $search"
          {{else}}
        cmd: "systemctl list-units $all --no-pager | grep $search"
          {{end}}
        {{else}}
          {{ if $status }}
        cmd: "systemctl list-units $all --state=$status --no-pager"
          {{else}}
        cmd: "systemctl list-units $all --no-pager"
          {{end}}
        {{end}}
  - name: list-target
    usage: list-target
    shortDesc: List OS target for the system
    description: |
      List the target present on the system
      WARNING: this command works only with the systemd architecture.
    category: system
    options:
      - name: search
        shortname: s
        {{/* search options variable */}}
        {{ $search := index .CmdFlags "--search" }}
        {{ $s := index .CmdFlags "-s" }}
        desc: |
          to filter a list using a regexp with linux grep command, some examples are:
          service list-target --on <host> -s '-i httpd'
          service list-target <host> -s '-v httpd'
          service list-target <host> -s 'httpd.*$'
      - name: active
        shortname: a
        {{/* search options variable */}}
        {{ $active := index .CmdFlags "--active" }}
        {{ $a := index .CmdFlags "-a" }}
        desc: |
          to filter the active targets
        substitution: " "
    systems:
      - type: "*"
        {{ if or $search  $s }}
          {{ if or $active  $a }}
        cmd: "systemctl list-units --type=target | grep $search"
          {{else}}      
        cmd: "systemctl list-unit-files --type=target | grep $search "
          {{end}}  
        {{else}}
          {{ if or $active  $a }}
        cmd: "systemctl list-units --type=target"
          {{else}}      
        cmd: "systemctl list-unit-files --type=target"
          {{end}}  
        {{end}}